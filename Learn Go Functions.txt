# LEARN GO: FUNCTIONS
---------------------

* What is a Function?
---------------------
In programming, a function is a block of code designed to be reused. As programmers, we want to find solutions to problems, but we also don’t want to do additional work when it’s not 
necessary. Let’s start with an example, say we needed to double a number:

	x := 5 
	doubleX := 5 * 2

Great, but what if we need to double another number?

	y := 3 
	doubleY := 3 * 2

And another??

	z := 25
	doubleZ := 25 * 2

These short bits of code could build up to a lot of time and effort (just to double a number!) That’s where functions can really help out. We can use a function to define the logic for us 
to perform this task, and call it (execute its code) when we need it:

	func doubleNum(num int) int {
  		return num * 2
	}

Don’t worry too much about the syntax for now, but it should look pretty familiar since we’ve worked with the main() function many times before (Reminder: one of the major differences is 
that the main() doesn’t have to be called, because the compiler already knows to run it). Our doubleNum() function will allow us to plug in numbers and it returns an integer that’s twice 
the number given! Also, if our outputs start looking weird, e.g. our numbers aren’t doubling, but tripling instead, we know that the cause is likely our function. We can jump straight to 
fixing our function’s code rather than looking through each statement like we had for doubleX, doubleY, and doubleZ. Our code becomes much more streamlined:

	fmt.Println(doubleNum(x)) // Prints: 10
	fmt.Println(doubleNum(y)) // Prints: 6
	fmt.Println(doubleNum(z)) // Prints: 50

We’ll go over more examples of how to create and use functions, when they can be accessed, and how to defer within a function later in this lesson. In a nutshell, we’ll see how functions 
function.

* Instructions
--------------
Take a look at the provided GIF. It shows a function, named addOneSide(), adding an additional side to different shape inputs. Notice how there is only one function, represented by the 
box, that is used to transform individual shapes (inputs) into new shapes (outputs).

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Using Functions
-----------------
As we saw before, we can bundle code in a function and call that function when we need the code inside it to run. We’ll be going over function syntax starting with a simple function 
definition:

	func summonNicole() {
  		fmt.Println("Hey Nicole, get over here!")
	}

Above, we defined a function called summonNicole() and, within the body of the function (the part between the curly braces) we print out a message. It’s important to note that the code 
inside the function body does not run until we call the function. We call a function by using its name followed by parentheses somewhere outside the definition of the function. Our whole main.go file could look like this:

package main

import "fmt"

func summonNicole() {
  fmt.Println("Hey Nicole, get over here!")
}

func main() {
  // We call our function for the first time
  summonNicole() 

  // We call our function for the second time
  summonNicole() 
}

In our example, we defined the function summonNicole() and called it twice inside our main() function. Notice that our function definition exists outside of main(), but calling summonNicole() occurs inside our main() function. This produces the following output in the terminal:

	Hey Nicole, get over here!
	Hey Nicole, get over here!

Now, let’s create our own functions.

* Instructions
--------------
Checkpoint 1 Passed
1.
Define a function called eatTacos() that uses fmt.Println() to print out the message "Yum!".


Hint
Define a function using the func keyword, the function’s name, parentheses, and then add the code for it to perform between curly braces:

func myFunction() {
  fmt.Println("Sure is neat to write my own functions!")
}

Checkpoint 2 Passed
2.
Call eatTacos() from within our main() function. main() is a function too, so in a sense you’ve already been writing your own functions!


Hint
Call eatTacos() within the curly braces inside main():

func main() {
  myFunction()
}

main.go
-------
package main

import "fmt"

// Define eatTacos() here:
func eatTacos() {
  fmt.Println("Yum!")
}

func main() {
  // Call your function here:
  eatTacos()
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------

* Scope
-------
A function definition creates something called a scope. We’ve referenced scope before in our conditionals exercise about scoped short declarations but it’s important to recognize how 
scope plays a huge role in functions and programming overall!

Scope is a concept that refers to where the values and functions are defined and where they can be accessed. For instance, when a variable is defined within a function, that variable is 
only accessible within that function. When we try to access that same variable from a different function, we get an error because we can’t do it. Each function has its own specific scope, 
take a look at the code:

package main

import "fmt"

func performAddition() {
  x := 5
  y := 7
  fmt.Println("The sum of", x, "and", y, "is", x + y)
}

func main() {
  performAddition()
  fmt.Println("What if", x, "was different?")
}

The above code exits with the following error:

./main.go:12:26: undefined: x

The error is raised because the x in main()‘s print statement fmt.Println("What if", x, "was different?") is in a different scope than the defined x inside performAddition(). It’s not 
possible to directly refer to performAddition()‘s x variable in the scope of main().

There are three different scopes present in this example:

	. The global scope, which contains the function definitions for main() and performAddition().

	. performAddition() has a local scope, which defines x and y.

	. main() has a local scope also. It can access performAddition() because that’s defined on the same scope level as main() but can’t access the internals of performAddition‘s scope 
	(i.e., x or y).

This differentiation of scope keeps the namespace, the available variables and keywords, cleaner as a result. You can only refer to variables or functions defined within a specific 
namespace.

* Instructions
--------------
Checkpoint 1 Passed
1.
In main.go we have a function that creates the instructions for the start of a game. We’re trying to access the string so that we can print it, but it’s in a different scope from the one 
our print statement is.

Move the fmt.Println(instructions) statement from the main() function body into startGame()‘s body.


Hint
Remove the fmt.Println() from main() and then put it in startGame():

func startGame() {
  instructions := "Press enter to start..."  
  fmt.Println(instructions)
}

main.go
-------
package main

import "fmt"

func startGame() {
  instructions := "Press enter to start..." 
  fmt.Println(instructions)
  
  
}

func main() {
  startGame()  
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Returning Values from Functions
---------------------------------
While variables and their values are scoped to their functions, we do have built-in ways of passing information out of their native functions and into another namespace. Let’s describe 
the way that information can be sent from within a function to the call site, the place where the function is called. This is done by returning a value — when we return a value, we pass the value to another place in our code. A function can be given a return type, the type of a value that will be returned by the function. At the call site, the return value can be stored within a variable of the same type as the function’s return.

func getLengthOfCentralPark() int32 {
  var lengthInBlocks int32
  lengthInBlocks = 51
  return lengthInBlocks
}

Above, we wrote the function getLengthOfCentralPark(), we can also decide the return type by adding a type after the set of parentheses. In this case, our function has a return type of 
int32. Then, inside the function, we declare a variable lengthInBlocks with a value of 51. In our last line, we have our return statement. A return statement tells the function to pass 
back a value (or multiple values) and stops the function from executing any more code, i.e. if we put more code after our return statement, it would not run! Our function is all set up, 
we need to now call it in main():

func main() {
  var centralParkLength int32
  centralParkLength = getLengthOfCentralPark()
  fmt.Println(centralParkLength) // Prints: 51
}

Inside main() we were able to create a variable centralParkLength with type int32 and store the result (the returned value) from getLengthOfCentralPark() into centralParkLength. Then we can check the value of centralParkLength by printing it, which confirms what we said about return by printing the number 51. Even though we can’t access lengthInBlocks from getLengthOfCentralPark() directly, we can access the information we need through the return keyword!

* Instructions
--------------
Checkpoint 1 Passed
1.
In main.go we’ve created a function that creates a message telling us whether or not it’s late in New York currently. Let’s make this function return that message.

Give isItLateInNewYork() a return type of string.


Hint
Change the line where isItLateInNewYork() is defined to add in a return type of string.

func isItLateInNewYork() string {
  // ...
}

Checkpoint 2 Passed
2.
At the end of isItLateInNewYork() return the value lateMessage to pass the value of this variable to the scope where the function is being called.


Hint
Add a return statement to the end of isItLateInNewYork() to return the value of lateMessage.

func isItLateInNewYork() {
  // ...
  return lateMessage
}

main.go
-------
package main
import (
  "fmt"
  "time"
)

// Add "string" as the return type of this function
func isItLateInNewYork() string {
  var lateMessage string
  t := time.Now()
  tz, _ := time.LoadLocation("America/New_York")
  nyHour := t.In(tz).Hour()
  if nyHour < 5 {
    lateMessage = "Goodness it is late"
  } else if nyHour < 16 {
    lateMessage = "It's not late at all!"
  } else if nyHour < 19 {
    lateMessage = "I guess it's getting kind of late"
  } else {
    lateMessage = "It's late"
  }
  
  // Return the string lateMessage
  return lateMessage
}

func main() {
  var nyLate string
  nyLate = isItLateInNewYork()
  fmt.Println(nyLate)
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Using Function Parameters
---------------------------
We know that functions can return information, but we can also provide functions with information using parameters. Function parameters are variables that are used within the function to 
use in some sort of computation or calculation. When calling a function, we give arguments, which are the values that we want those parameter variables to take. We give our function 
parameters types when defining the function:

func multiplier(x int32, y int32) int32 {
  return x * y
}

In the function above, we added information inside our parentheses, that is where parameters belong. Our first parameter is x and it has a type of int32. Our second parameter, y also has 
a type of int32. After the parentheses is something we’ve seen before: the type of our return value. Since both parameters have the same type, we could write it as:

func multiplier(x, y int32) int32 {
  return x * y
}

See how we wrote int32 once at the end of our list of parameters instead of writing int32 after each parameter?

Let’s now call our function with literal values as arguments:

func main() {
  var product int32
  product = multiplier(25, 4)
  fmt.Println(product) // Prints: 100
}

We can also call our function with variables as arguments:

func main() {
  var mainX, mainY, newProduct int32
  mainX = 6
  mainY = 7
  newProduct = multiplier(mainX, mainY)
  fmt.Println(newProduct) // Prints: 42
}

Notice in both cases, our functions worked as expected with the provided arguments! But, it’s important that we provide enough arguments. Our multiplier() function has two parameters, so 
it expects two arguments. If we don’t, the Go compiler throws an error that reads not enough arguments in call to (functionName) or in our case: not enough arguments in call to 
multiplier.

* Instructions
--------------
Checkpoint 1 Passed
1.
We’ve created a function called computeMarsYears() that will calculate the number of Martian years someone has lived based on the number of Earth years they’ve lived. We hard-coded 
earthYears to be 30 within the definition of computeMarsYears()

First let’s make earthYears one of the parameters for computeMarsYears() by adding it between the parentheses. Give the earthYears parameter the type int.


Hint
Give computeMarsYears() a parameter with the following syntax:

func computeMarsYears(earthYears int) int {
  // ...
}

Checkpoint 2 Passed
2.
There are two errors currently in our terminal, let’s get rid of one of them.

In computeMarsYears(), we still have earthYears set to 30, we need to remove it since it is now a parameter (this will get rid of the error that reads: no new variables on left side 
of :=).


Hint
Simply remove the line of code with earthYears := 30. It would be OK to comment it, but you should feel enough conviction here to completely remove the line.

You might also realize that Go’s compiler raises an error due to this redefinition. If it didn’t, this could be really confusing since we could potentially pass in an argument, only for 
it to be overridden by the redefinition inside our function body! For example:

func square (x int) int {
  x := 5
  return x * x
}

func main () {
  fmt.Print(square(10)) // Prints: 25
}

Disclaimer, this would not work in Go, but the point is that we would get very confusing results if our arguments get redefined.

Checkpoint 3 Passed
3.
We can now get rid of the last error not enough arguments in call to computeMarsYears.

In main() use the myAge variable to pass that value as an argument to computeMarsYears().


Hint
Inside main() call computeMarsYears() with myAge using the following syntax:

myMartianAge := computeMarsYears(myAge)

main.go
-------
package main
import "fmt"

// Update marsYear so that it takes earthYears
// As a parameter
func computeMarsYears(earthYears int) int {
  // Remove earthYears definition within marsYear
  
  earthDays := earthYears * 365
  marsYears := earthDays / 687
  return marsYears
}

func main() {
  myAge := 25
  
  // Call `marsYear` with `myAge`
  myMartianAge := computeMarsYears(myAge)
  fmt.Println(myMartianAge)
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------





































































































