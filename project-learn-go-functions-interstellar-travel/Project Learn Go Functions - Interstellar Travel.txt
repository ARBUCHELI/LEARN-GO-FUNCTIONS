* Project - Learn Go Functions: Interstellar Travel
---------------------------------------------------
You’ll be writing Go functions to perform calculations and build out an interstellar travel agency!

As you work through the project, remember to check the output of your functions to ensure that you’re writing your functions correctly.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Creating our Interstellar Travel Agency
-----------------------------------------
1.
Welcome to the Interstellar Travel Agency, where we get you there. We’ll need your help getting our luxury rocketships off the ground. One major concern our pilots always have is fuel. 
We’ll need to create a function that tells our pilots how much fuel they currently have.

Write a function called fuelGauge() which takes an int parameter, fuel. Inside the function print out a message telling the pilot how much fuel they have left using fmt.Println() and the 
argument passed to fuel.

It’s good practice to check the output of fuelGauge() (and later functions) in the main() function. Checking your functions as you code along will ensure that you’re writing the functions 
correctly. (But remember to remove the function calls afterward!)

Hint
Use the following syntax to create a fuelGauge() function:

func fuelGauge(fuel int) {
  fmt.Println("You have", fuel, "gallons of fuel left!")
}

You could also use .Printf() like so:

fmt.Printf("You have %d gallons of fuel left!", fuel)

Call fuelGauge() with a number in main() to check what’s printed to the terminal. Delete the function call after you confirm it’s what you want.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

2.
Time to create a function that calculates the amount of fuel needed to go to a specific planet.

Write a function calculateFuel() that has a single parameter, a string called planet and returns an int (this will be the amount of fuel needed to fly to that planet).


Hint
Use the following syntax to create a Go function:

func calculateFuel(planet string) int {

}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

3.
Inside calculateFuel() create a variable called fuel, an int. This is the variable we’re going to return at the end of the function.


Hint
Create a variable with the following line of code within calculateFuel():

var fuel int

------------------------------------------------------------------------------------------------------------------------------------------------------------------

4.
Depending on the planet, the amount of fuel required is going to change. Create a switch or a series of if & else statements to assign fuel in the following cases:

	. Venus: 300000
	. Mercury: 500000
	. Mars: 700000
	. If it’s not listed above: 0

One example being, if the planet has a value of "Venus", then assign fuel a value of 300000. Use the information above to decide what to assign to fuel.


Hint
Assign fuel depending on the value inside planet:

if planet == "Mercury" {
  fuel = 500000
} else if planet == "Venus" {
  fuel = 300000
} else if planet == "Mars" {
  fuel = 700000
}

You can also use a switch statement:

switch planet {
case "Venus":
  fuel = 300000
// Rest of the case clauses...
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

5.
Return fuel at the end of the function.

Check that calculateFuel() is working correctly in main() (then remove the function call after you know it works).


Hint
In main(), use a print statement to check calculateFuel() with an argument:

func main() {
  fmt.Println(calculateFuel("Venus"))
}

The above should print out 300000. If it doesn’t then you’ll need to edit your function! Then check with all the other planets and an argument that contains a string not contained in our 
if...else or switch statement.

Remove these function calls when you’re done.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* It's a Gas: Messaging and Errors
----------------------------------
6.
Let’s create a messaging service that lets folks know where they’re headed. Create a function called greetPlanet(), this function should take a single parameter, planet, a string.


Hint
Use the following syntax:

func greetPlanet(planet string) {
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

7.
Inside greetPlanet() use a print statement to inform your passengers of where they are by providing a message welcoming them to their destination.


Hint
Your message could look like:

fmt.Println("Welcome to planet", planet)

Call greetPlanet() inside main() to confirm that it prints the correct message. Since greetPlanet() doesn’t return anything, calling it should print out the string. Remember to delete the 
function call afterward.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

8.
Let’s also create a function called cantFly() doesn’t have any parameters and doesn’t return anything.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

9.
Within cantFly(), print out a message that says "We do not have the available fuel to fly there.".


Hint
Your message could look like:

fmt.Println("We do not have the available fuel to fly there.")

Call cantFly() inside main() to confirm that it prints the correct message. Since cantFly() doesn’t return anything, calling it should print out the string. Remember to delete the function call afterward.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* It's A Big Trip, All The Way Up
---------------------------------

10.
Now lets create a function called flyToPlanet() that uses the previous functions we’ve built to coordinate our flight.

flyToPlanet() should take two parameters: planet (a string) and fuel (an int) and should return an int, the remaining fuel.


Hint
Create a function with the following signature:

func flyToPlanet(planet string, fuel int) int {

}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

11.
Inside flyToPlanet() create the following variables fuelRemaining and fuelCost, both ints.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

12.
Set fuelRemaining equal to fuel.


Hint
We want to use fuelRemaining as our returned value. Let’s make it match the amount of fuel we have at the start of our trip. So far your flyToPlanet() function should look like this:

func flyToPlanet(planet string, fuel int) int {
  var fuelRemaining, fuelCost int
  fuelRemaining = fuel
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

13.
Now call calculateFuel() with planet as an argument. Save the result in fuelCost.


Hint
The function calculateFuel() returns an int, which we can store within fuelCost.

fuelCost = calculateFuel(planet)

------------------------------------------------------------------------------------------------------------------------------------------------------------------

14.
Check to see if fuelRemaining is greater than or equal to fuelCost. If it is, do the following:

	. Call greetPlanet() with planet.

	. Subtract fuelCost from fuelRemaining.

Hint
Use the following code to check fuelRemaining and fly to the given planet:

if fuelRemaining >= fuelCost {
  greetPlanet(planet)
  fuelRemaining -= fuelCost
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

15.
If fuelCost is greater than fuelRemaining, call cantFly().


Hint
Use an else statement after your if statement:

if fuelRemaining >= fuelCost {
  greetPlanet(planet)
  fuelRemaining -= fuelCost
} else {
  cantFly()
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

16.
Finally, return fuelRemaining!


Hint
You can test your function in main() using the following syntax:

func main() {
  fmt.Println(flyToPlanet("Mercury", 600000))
}

You should see:

Welcome to planet Mercury
100000

Pass in different arguments and test your function! Remember, delete the function call after you’re done.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Fly Me To The Stars
---------------------
17.
Inside our main() function, we want to fly to the skies! Let’s start by making a fuel int. This will be the amount of fuel in our current spacecraft!

18.
Set fuel equal to 1000000, the number of gallons of fuel in your tank. That’s a lot of gas!

19.
We’re gonna need all that gas where we’re going! Create a variable called planetChoice and assign a value of "Venus" to it.


Hint
There are two ways you can define a string:

var planetChoice string
planetChoice = "Venus"

Or

planetChoice := "Venus"

------------------------------------------------------------------------------------------------------------------------------------------------------------------

20.
Call flyToPlanet() with planetChoice and fuel as arguments. Remember that flyToPlanet() returns our remaining fuel, so save that back into the variable fuel.


Hint
Update your fuel parameter and fly all the way to Venus in a single line of code!

fuel = flyToPlanet(planetChoice, fuel)

------------------------------------------------------------------------------------------------------------------------------------------------------------------

21.
Check your gas tank! Call fuelGauge() with fuel after flying to Venus!


Hint
Your main() function should look like the following:

func main() {
  fuel := 1000000
  planetChoice := "Venus"

  fuel = flyToPlanet(planetChoice, fuel)
  fuelGauge(fuel)
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

22.
Congrats! Good job getting us from liftoff through the skies!

If you want to challenge yourself more:

Add a variable that keeps track of which planet your spaceship is on.
Create a function that returns your spaceship back to your home planet.
Add more destinations and allow for traveling between different planets.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

main.go
-------
package main

import "fmt"

// Create the function fuelGauge() here
func fuelGauge(fuel int) {
  fmt.Println("You have", fuel, "gallons of fuel left!")
}

// Create the function calculateFuel() here
func calculateFuel(planet string) int {
  var fuel int;
  switch planet {
    case "Venus":
      fuel = 300000
      break
    case "Mercury":
      fuel = 500000
      break
    case "Mars":
      fuel = 700000
      break
    default:
      fuel = 0
  }
  fmt.Println("For going to", planet, "you need", fuel, "gallons of fuel!")
  return fuel
}

// Create the function greetPlanet() here
func greetPlanet(planet string) {
  fmt.Println("Welcome to planet", planet)
}

// Create the function cantFly() here
func cantFly() {
  fmt.Println("We do not have the available fuel to fly there.")
}

// Create the function flyToPlanet() here
func flyToPlanet(planet string, fuel int) int {
 var fuelRemaining, fuelCost int
 fuelRemaining = fuel
 fuelCost = calculateFuel(planet)

 if (fuelRemaining >= fuelCost) {
  greetPlanet(planet)
  fuelRemaining -= fuelCost
 } else {
  cantFly()
 }
 return fuelRemaining
}

func main() {
  // Test your functions!
  //fuelGauge(140)
  //calculateFuel("Venus")
  //greetPlanet("Venus")
 //cantFly()
  //fmt.Println(flyToPlanet("Mercury", 600000))
  // Create `planetChoice` and `fuel`
  //var fuel int
  fuel = 1000000
  var planetChoice string
  planetChoice = "Venus"
  // And then liftoff!
  fuel = flyToPlanet(planetChoice, fuel)
  fuelGauge(fuel)
}





